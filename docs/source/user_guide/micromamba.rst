.. _micromamba:

=====================
Micromamba User Guide
=====================

Micromamba is a fully statically-linked, self-contained, executable written in C++.

Micromamba does not require Conda to be installed on your system; it is entirely self-contained.

Thus, its ``base`` environment is completely empty and it does not ship Python by default.

The configuration for Micromamba is slighly different from Conda:

- All environments and cache will be created by default under the ``MAMBA_ROOT_PREFIX`` environment variable.
- There is no pre-configured ``.condarc``/``.mambarc`` shipped with micromamba (they are however still read if present).


Quickstarts
===========

Micromamba's CLI interface is similar to Conda's:

Creating environments
---------------------

Use ``micromamba create -f environment.yml`` to create an environment, similar to ``conda env create``.

You can also start with an empty environment and add new packages later (see below): ``micromamba create -n myenv``.

Activating environments
-----------------------

Use ``micromamba activate -n myenv`` or ``micromamba activate -p /path/to/myenv`` to :ref:`activate <activation>` an environment.

Installing packages
-------------------

Use ``micromamba install mypackage`` to install a new package to the activated environment, or ``micromamba install -n myenv mypackage`` to install a new package to any other environment.


Environment specification files
===============================

The ``create`` syntax also allows you to use specification or environment files (also called *spec files*) to easily re-create environments.

The supported syntaxes are:

.. contents:: :local:

Simple text spec files
**********************

The ``txt`` file contains *one spec per line*. For example, this could look like:

.. code::

  xtensor
  numpy 1.19
  xsimd >=7.4


To use this file, pass:

.. code::

  $ micromamba create -n from_file -f spec_file.txt -c conda-forge

.. note::
  You can pass multiple text spec files by repeating the ``-f,--file`` argument.


Conda YAML spec files
*********************

More powerful are ``YAML`` files like the following, because they already contain a desired environment name and the channels to use:

.. code::

  name: testenv
  channels:
    - conda-forge
  dependencies:
    - python >=3.6,<3.7
    - ipykernel >=5.1
    - ipywidgets

They are used the same way as text files:

.. code::

  $ micromamba create -f env.yml

.. note::
  CLI options will keep :ref:`precedence<precedence-resolution>` over *target prefix* or *channels* specified in spec files.

.. warning::
  ``YAML`` spec files do not allow multiple files.

Explicit spec files
*******************

Using ``conda`` you can generate *explicit* environment lock files. For this, create an environment, activate it, and execute:

.. code::

  $ conda list --explicit --md5

These environment files look like the following and precisely "pin" the desired package + version + build string. Each package also has a checksum for reproducibility:

.. code::

  # This file may be used to create an environment using:
  # $ conda create --name <env> --file <this file>
  # platform: linux-64
  @EXPLICIT
  https://conda.anaconda.org/conda-forge/linux-64/_libgcc_mutex-0.1-conda_forge.tar.bz2#d7c89558ba9fa0495403155b64376d81
  https://conda.anaconda.org/conda-forge/linux-64/libstdcxx-ng-9.3.0-h2ae2ef3_17.tar.bz2#342f3c931d0a3a209ab09a522469d20c
  https://conda.anaconda.org/conda-forge/linux-64/libgomp-9.3.0-h5dbcf3e_17.tar.bz2#8fd587013b9da8b52050268d50c12305
  https://conda.anaconda.org/conda-forge/linux-64/_openmp_mutex-4.5-1_gnu.tar.bz2#561e277319a41d4f24f5c05a9ef63c04
  https://conda.anaconda.org/conda-forge/linux-64/libgcc-ng-9.3.0-h5dbcf3e_17.tar.bz2#fc9f5adabc4d55cd4b491332adc413e0
  https://conda.anaconda.org/conda-forge/linux-64/xtl-0.6.21-h0efe328_0.tar.bz2#9eee90b98fd394db7a049792e67e1659
  https://conda.anaconda.org/conda-forge/linux-64/xtensor-0.21.8-hc9558a2_0.tar.bz2#1030174db5c183f3afb4181a0a02873d

To install such a file with ``micromamba``, just pass the ``-f`` flag again:

.. code::

  $ micromamba create -n xtensor -f explicit_env.txt

.. note::

   Explicit spec files are single-platform.

.. _micromamba-conda-lock:

``conda-lock`` YAML spec files
******************************

Using ``conda-lock``, you can generate lockfiles which, like explicit spec files, pin precisely and include a checksum for each package for reproducibility.
Unlike explicit spec files, these "unified" lock files are multi-platform.

These files are named ``conda-lock.yml`` by default, and look like:

.. code::

    # This lock file was generated by conda-lock (https://github.com/conda/conda-lock). DO NOT EDIT!
    #
    # A "lock file" contains a concrete list of package versions (with checksums) to be installed. Unlike
    # e.g. `conda env create`, the resulting environment will not change as new package versions become
    # available, unless you explicitly update the lock file.
    #
    # Install this environment as "YOURENV" with:
    #     conda-lock install -n YOURENV --file conda-lock.yml
    # To update a single package to the latest version compatible with the version constraints in the source:
    #     conda-lock lock  --lockfile conda-lock.yml --update PACKAGE
    # To re-solve the entire environment, e.g. after changing a version constraint in the source file:
    #     conda-lock -f environment.yml --lockfile conda-lock.yml
    version: 1
    metadata:
      content_hash:
        osx-64: c2ccd3a86813af18ea19782a2f92b5a82e01c89f64a020ad6dea262aae638e48
        linux-64: 06e0621a9712fb0dc0b16270ddb3e0be16982b203fc71ffa07408bf4bb7c22ec
        win-64: efee77261626b3877b9d7cf7bf5bef09fd8e5ddfc79349a5f598ea6c8891ee84
      channels:
      - url: conda-forge
        used_env_vars: []
      platforms:
      - linux-64
      - osx-64
      - win-64
      sources:
      - environment.yml
    package:
    - name: _libgcc_mutex
      version: '0.1'
      manager: conda
      platform: linux-64
      dependencies: {}
      url: https://conda.anaconda.org/conda-forge/linux-64/_libgcc_mutex-0.1-conda_forge.tar.bz2
      hash:
        md5: d7c89558ba9fa0495403155b64376d81
        sha256: fe51de6107f9edc7aa4f786a70f4a883943bc9d39b3bb7307c04c41410990726
      category: main
      optional: false
    - name: ca-certificates
      version: 2023.5.7
      manager: conda
      platform: linux-64
      dependencies: {}
      url: https://conda.anaconda.org/conda-forge/linux-64/ca-certificates-2023.5.7-hbcca054_0.conda
      hash:
        md5: f5c65075fc34438d5b456c7f3f5ab695
        sha256: 0cf1bb3d0bfc5519b60af2c360fa4888fb838e1476b1e0f65b9dbc48b45c7345
      category: main
      optional: false

To install such a file with ``micromamba``, just pass the ``-f`` flag again:

.. code::

  $ micromamba create -n my-environment -f conda-lock.yml
